{{ partial "navigation" }}

<div class="content">
  <h1>Events</h1>

  <section>
    <div class="view-more">
      <p>
        The range-slider component can send two actions to your route when a
        user interacts with the slider. You can set <em>on-change</em> to an
        action that will be called when sliding has stopped, or you can
        set <em>on-slide</em> to an action for when a user is sliding the
        control.
      </p>

      <div class="example">
        {{range-slider start=model.start range=model.range on-change="change" on-slide="slide" on-update="update" on-set="setValue" on-start="started" on-end="ended"}}
        <div class="logger">
          <div class="l-update {{if model.updating 'tShow'}}">Update</div>
          <div class="l-slider {{if model.sliding 'tShow'}}">Slide</div>
          <div class="l-set {{if model.beenSet 'tShow'}}">Set</div>
          <div class="l-changes {{if model.changed 'tShow'}}">Change</div>
          <div class="l-start {{if model.started 'tShow'}}">Start</div>
          <div class="l-end {{if model.ended 'tShow'}}">End</div>
        </div>
        <div class="logger">
          <input type="text" value="{{model.value}}">
        </div>
      </div>
      <table class="data-table events-table">
        <thead>
          <tr>
            <th>&nbsp;</th>
            <th width="95">on-update</th>
            <th width="85">on-slide</th>
            <th width="85">on-set</th>
            <th width="95">on-change</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><span>A handle is <strong>released</strong> after dragging</span></td>
            <td class="yes"><span>Yes</span></td>
            <td class="no"><span>No</span></td>
            <td class="yes"><span>Yes</span></td>
            <td class="yes"><span>Yes</span></td>
          </tr>
          <tr>
            <td><span>A slider is moved by <strong>tapping</strong> it</span></td>
            <td class="yes"><span>Yes</span></td>
            <td class="yes"><span>Yes</span></td>
            <td class="yes"><span>Yes</span></td>
            <td class="yes"><span>Yes</span></td>
          </tr>
          <tr>
            <td><span>A handle moves while <strong>dragging</strong></span></td>
            <td class="yes"><span>Yes</span></td>
            <td class="yes"><span>Yes</span></td>
            <td class="no"><span>No</span></td>
            <td class="no"><span>No</span></td>
          </tr>
          <tr>
            <td><span>The <strong>.set()</strong> method is called</span></td>
            <td class="yes"><span>Yes</span></td>
            <td class="no"><span>No</span></td>
            <td class="yes"><span>Yes</span></td>
            <td class="no"><span>No</span></td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class="side">
      {{#source-code language="handlebars"}}
\{{range-slider start=model.start
                range=model.range
                on-slide="slide"
                on-change="changed"
                on-update="update"
                on-set="setValue"
                on-start="started"
                on-end="ended"}}
      {{/source-code}}

      {{#source-code language="javascript"}}
// app/routes/eventful.js
export default Ember.Route.extend({
  actions: {
    update: function(val) {
      // updating
    },
    changed: function(val) {
      // change event
    },
    slide: function(val) {
      // sliding
    },
    setValue: function(val) {
      // set event
    },
    started: function(val) {
      // sliding started
    },
    ended: function(val) {
      // sliding ended
    }
  }
});
      {{/source-code}}
    </div>
  </section>

  <a href="#section-change" id="section-change" class="sect">&sect;</a><h2>Change</h2>
  <section>
    <div class="view">
      <p>
        This action is great when you use the slider as 'just-another-input-type'.
      </p>
      <p>
        The name of the action can be changed
        by passing an action name to the <em>change</em> parameter
      </p>
    </div>
    <div class="side">
      {{#source-code language="handlebars"}}
\{{range-slider on-change="myAction"}}
      {{/source-code}}
      {{#source-code language="javascript"}}
export default Ember.Route.extend({
  actions: {
    myAction: function(val) {
      // ...
    }
  }
});
      {{/source-code}}
    </div>
  </section>

  <a href="#section-slide" id="section-slide" class="sect">&sect;</a><h2>Slide</h2>
  <section>
    <div class="view">
      <p>
        This action is useful when you want to update a value or perform an
        action every time a handle is dragged. For example, you can use the
        'slide' action to update graphs. For convenience, this function also
        fires on a change by 'tap'.
      </p>
      <p>
        By default no actions are sent, you need to explicitly specify an action
        name by setting the <em>on-slide</em> property.
      </p>
    </div>
    <div class="side">
      {{#source-code language="handlebars"}}
\{{range-slider on-slide="slidingAction"}}
      {{/source-code}}
      {{#source-code language="javascript"}}
export default Ember.Route.extend({
  actions: {
    slidingAction: function(val) {
      // ...
    }
  }
});
      {{/source-code}}
    </div>
  </section>
</div>
